defaultStorageMapping: SRC
jobs: {}
locations:
  SRC:
    mappingDefinitions:
      "2":
        database: COALESCE_SAMPLE_DATABASE
        schema: TPCH_SF001
  STG:
    mappingDefinitions:
      "2":
        database: SCOTT_DB
        schema: STG
macros: {}
packages: {}
projects: {}
stepTypes:
  StepType-1:
    id: "1"
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        mappingColumns:
        - headerName: Foo Datatype
          attributeName: dataType
          type: textBox
        - headerName: Ghost Records
          attributeName: ghostRecord
          type: textBox
      templates:
        create:
          templateString: "{% if node.override.create.enabled %}\n\t\n\t{{ node.override.create.script }}\n\n{% elif node.materializationType == 'table' %}\n\t{{ stage('Create Stage Table') }}\n\n\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t{% endif %}\n\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\n\n{% elif node.materializationType == 'view' %}\n    {{ stage('Create Stage View') }}\n\n    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n    (\n        {% for col in columns %}\n            \"{{ col.name }}\"\n            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n    )\n    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n    AS\n    {% for source in sources %}\n        SELECT\n        {% for col in source.columns %}\n            {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n\n        {{ source.join }}\n\n        {% if not loop.last %}\n            {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}\n                {{ config.insertStrategy }}\n            {% else %}\n                UNION\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n\n{% endif %}\n"
        run:
          templateString: "\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t{% if config.preSQL %}\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\t\n\t\n\t\n\t\t{% if config.truncateBefore %}\n\t\n\t\t\t{{ stage('Truncate Stage Table') }}\n\t\t\tTRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}\n\t\n\t\t{% endif %}\n\t\n\t\n\t\t{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}\n\t\t\t{{ stage( config.insertStrategy + ' Sources' | string ) }}\n\t\t\tINSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in columns %}\n\t\t\t\t\t\t\"{{ col.name }}\"\n\t\t\t\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t{% endif %}\n\t\n\t\n\t\t{% for source in sources %}\n\t\n\t\t\t{% if config.insertStrategy == 'INSERT' %}\n\t\t\t\t{{ stage('Insert ' + source.name | string ) }}\n\t\n\t\t\t\tINSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in source.columns %}\n\t\t\t\t\t\t\"{{ col.name }}\"\n\t\t\t\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t\t{% endif %}\n\t\n\t\t\tSELECT\n\t\t\t{% for col in source.columns %}\n                {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t{% endfor %}\n\t\n\t\t\t{{ source.join }}\n\t\n\t\t\t{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}\n\t\t\t\t{{config.insertStrategy}}\n\t\t\t{% endif %}\n\t\n\t\t{% endfor %}\n\t\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n"
    name: Test
    version: 1
  StepType-2:
    id: "2"
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: "{% if node.materializationType == 'table' %}\n\t{{ stage('Create Dimension Table') }}\n\n\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t{% if col.isSurrogateKey %}\n\t\t        identity\n\t\t\t{% endif %}\n\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t{% endif %}\n\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\n\n{% elif node.materializationType == 'view' %}\n\t{{ stage('Create Dimension View') }}\n\n\tCREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\"\n\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t{% endfor %}\n\t)\n\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\tAS\n\t{% for source in sources %}\n\n\t\t{% if loop.first %}SELECT {% endif %}\n\n\t\t{% for col in source.columns %}\n\t\t\t{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}\n                NULL\n\t\t\t{% else %}\n                {{ get_source_transform(col) }}\n\t\t\t{% endif %}\n\t\t\tAS \"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t\t{{ source.join }}\n\n\t\t{% if not loop.last %} UNION ALL {% endif %}\n\t{% endfor %}\n\n{% endif %}\n"
        run:
          templateString: "\n{% set is_type_2 = columns | selectattr(\"isChangeTracking\") | list | length > 0 %}\n\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\n\t{% if config.preSQL %}\t\t\t\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\t\n    {% if is_type_2 %}\n\n        {% for source in sources %}\n            {{ stage('MERGE ' + source.name | string) }}\n            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n            USING (\n            /* New Rows That Don't Exist */\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion %}\n                    1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                   {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor %}\n                'INSERT_INITAL_VERSION_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                    {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                \"DIM\".\"{{ col.name }}\" IS NULL\n            {% endfor %}\n            UNION ALL\n            /* New Row Needing To Be Inserted Due To Type-2 Column Changes */\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion %}\n                    \"DIM\".\"{{ col.name }}\" + 1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                   {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor %}\n                'INSERT_NEW_VERSION_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            {% for col in source.columns if (col.isChangeTracking == true) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**') )\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            UNION ALL\n            /* Rows Needing To Be Expired Due To Type-2 Column Changes\n            In this case, only two columns are merged (version and end date) */\n            SELECT\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemEndDate %}\n                    DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))\n                {% elif col.isSystemCurrentFlag %}\n                    'N'\n                {% else %}\n                    \"DIM\".\"{{ col.name }}\"\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor -%}\n                'update_expired_version_rows' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            {% for col in source.columns if (col.isChangeTracking == true) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**') )\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            UNION ALL\n            /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns\n            This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/\n            SELECT\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}\n                    \"DIM\".\"{{ col.name }}\"\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                    {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor -%}\n                'UPDATE_NON_TYPE2_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            AND (\n            {% for col in source.columns if (col.isChangeTracking) -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %} )\n            {% for col in source.columns if not (   col.isBusinessKey or\n                                                    col.isChangeTracking or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemUpdateDate or\n                                                    col.isSystemCreateDate) -%}\n                {% if loop.first %}\n                    AND (\n                {% endif %}\n                {% if not loop.first %}\n                    OR\n                {% endif %}\n                NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**')\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n        ) AS \"SRC\"\n        ON\n        {% for col in source.columns if col.isBusinessKey -%}\n            {% if not loop.first %}\n                AND\n            {% endif %}\n            \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n        {% endfor %}\n        AND \"TGT\".\"{{ get_value_by_column_attribute(\"isSystemVersion\") }}\" = \"SRC\".\"{{ get_value_by_column_attribute(\"isSystemVersion\") }}\"\n        WHEN MATCHED THEN UPDATE SET\n        {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}\n            \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        WHEN NOT MATCHED THEN INSERT (\n        {%- for col in source.columns if not col.isSurrogateKey %}\n            \"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        )\n        VALUES (\n        {%- for col in source.columns if not col.isSurrogateKey %}\n            \"SRC\".\"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        )\n\n    {% endfor %}\n\n\n\n    {% else %}\n        {% for source in sources %}\n            {{ stage('MERGE ' + source.name | string ) }}\n            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n            USING (\n                SELECT\n                {% for col in source.columns if not col.isSurrogateKey %}\n                    {% if col.isSystemVersion %}\n                    \t1\n                    {% elif col.isSystemCurrentFlag %}\n                    \t'Y'\n                    {% else %}\n                        {{ get_source_transform(col) }}\n                    {% endif %}\n                    AS \"{{ col.name }}\"\n                    {%- if not loop.last %}, {% endif %}\n                {% endfor %}\n                {{ source.join }})\n                AS \"SRC\"\n            ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                \"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n            {% endfor %}\n            WHEN MATCHED\n            {% for col in source.columns if not (   col.isBusinessKey or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemUpdateDate or\n                                                    col.isSystemCreateDate) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                NVL( CAST(\"SRC\".\"{{ col.name }}\" as STRING), '**NULL**') <> NVL( CAST(\"TGT\".\"{{ col.name }}\" as STRING), '**NULL**')\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            THEN UPDATE SET\n            {%- for col in source.columns if not (  col.isBusinessKey or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemCreateDate) %}\n                    \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor %}\n            WHEN NOT MATCHED THEN\n            INSERT (\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                \"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor -%}\n            )\n            VALUES (\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                \"SRC\".\"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor -%}\n            )\n        {% endfor %}\n    {% endif %}\n\t\n\t{% if config.postSQL %}\t\t\t\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n"
    name: Copy of Dimension
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: "{% if node.materializationType == 'table' %}\n\t{{ stage('Create Dimension Table') }}\n\n\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t{% if col.isSurrogateKey %}\n\t\t        identity\n\t\t\t{% endif %}\n\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t{% endif %}\n\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\n\n{% elif node.materializationType == 'view' %}\n\t{{ stage('Create Dimension View') }}\n\n\tCREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\"\n\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t{% endfor %}\n\t)\n\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\tAS\n\t{% for source in sources %}\n\n\t\t{% if loop.first %}SELECT {% endif %}\n\n\t\t{% for col in source.columns %}\n\t\t\t{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}\n                NULL\n\t\t\t{% else %}\n                {{ get_source_transform(col) }}\n\t\t\t{% endif %}\n\t\t\tAS \"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t\t{{ source.join }}\n\n\t\t{% if not loop.last %} UNION ALL {% endif %}\n\t{% endfor %}\n\n{% endif %}\n"
        run:
          templateString: "\n{% set is_type_2 = columns | selectattr(\"isChangeTracking\") | list | length > 0 %}\n\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\n\t{% if config.preSQL %}\t\t\t\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\t\n    {% if is_type_2 %}\n\n        {% for source in sources %}\n            {{ stage('MERGE ' + source.name | string) }}\n            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n            USING (\n            /* New Rows That Don't Exist */\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion %}\n                    1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                   {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor %}\n                'INSERT_INITAL_VERSION_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                    {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                \"DIM\".\"{{ col.name }}\" IS NULL\n            {% endfor %}\n            UNION ALL\n            /* New Row Needing To Be Inserted Due To Type-2 Column Changes */\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion %}\n                    \"DIM\".\"{{ col.name }}\" + 1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                   {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor %}\n                'INSERT_NEW_VERSION_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            {% for col in source.columns if (col.isChangeTracking == true) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**') )\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            UNION ALL\n            /* Rows Needing To Be Expired Due To Type-2 Column Changes\n            In this case, only two columns are merged (version and end date) */\n            SELECT\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemEndDate %}\n                    DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))\n                {% elif col.isSystemCurrentFlag %}\n                    'N'\n                {% else %}\n                    \"DIM\".\"{{ col.name }}\"\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor -%}\n                'update_expired_version_rows' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            {% for col in source.columns if (col.isChangeTracking == true) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**') )\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            UNION ALL\n            /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns\n            This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/\n            SELECT\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}\n                    \"DIM\".\"{{ col.name }}\"\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                    {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor -%}\n                'UPDATE_NON_TYPE2_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            AND (\n            {% for col in source.columns if (col.isChangeTracking) -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %} )\n            {% for col in source.columns if not (   col.isBusinessKey or\n                                                    col.isChangeTracking or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemUpdateDate or\n                                                    col.isSystemCreateDate) -%}\n                {% if loop.first %}\n                    AND (\n                {% endif %}\n                {% if not loop.first %}\n                    OR\n                {% endif %}\n                NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**')\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n        ) AS \"SRC\"\n        ON\n        {% for col in source.columns if col.isBusinessKey -%}\n            {% if not loop.first %}\n                AND\n            {% endif %}\n            \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n        {% endfor %}\n        AND \"TGT\".\"{{ get_value_by_column_attribute(\"isSystemVersion\") }}\" = \"SRC\".\"{{ get_value_by_column_attribute(\"isSystemVersion\") }}\"\n        WHEN MATCHED THEN UPDATE SET\n        {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}\n            \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        WHEN NOT MATCHED THEN INSERT (\n        {%- for col in source.columns if not col.isSurrogateKey %}\n            \"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        )\n        VALUES (\n        {%- for col in source.columns if not col.isSurrogateKey %}\n            \"SRC\".\"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        )\n\n    {% endfor %}\n\n\n\n    {% else %}\n        {% for source in sources %}\n            {{ stage('MERGE ' + source.name | string ) }}\n            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n            USING (\n                SELECT\n                {% for col in source.columns if not col.isSurrogateKey %}\n                    {% if col.isSystemVersion %}\n                    \t1\n                    {% elif col.isSystemCurrentFlag %}\n                    \t'Y'\n                    {% else %}\n                        {{ get_source_transform(col) }}\n                    {% endif %}\n                    AS \"{{ col.name }}\"\n                    {%- if not loop.last %}, {% endif %}\n                {% endfor %}\n                {{ source.join }})\n                AS \"SRC\"\n            ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                \"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n            {% endfor %}\n            WHEN MATCHED\n            {% for col in source.columns if not (   col.isBusinessKey or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemUpdateDate or\n                                                    col.isSystemCreateDate) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                NVL( CAST(\"SRC\".\"{{ col.name }}\" as STRING), '**NULL**') <> NVL( CAST(\"TGT\".\"{{ col.name }}\" as STRING), '**NULL**')\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            THEN UPDATE SET\n            {%- for col in source.columns if not (  col.isBusinessKey or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemCreateDate) %}\n                    \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor %}\n            WHEN NOT MATCHED THEN\n            INSERT (\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                \"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor -%}\n            )\n            VALUES (\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                \"SRC\".\"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor -%}\n            )\n        {% endfor %}\n    {% endif %}\n\t\n\t{% if config.postSQL %}\t\t\t\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n"
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: "{% if node.materializationType == 'table' %}\n\t\t\t\t{{ stage('Create Hub Table') }}\n\t\t\t\n\t\t\t\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in columns %}\n\t\t\t\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t\t\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\t\t\t\n\t\t\t{% endif %}"
        run:
          templateString: "\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t{% if config.preSQL %}\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\n\n\t{{ stage('Merge Hub') }}\n\tMERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\" USING\n\t(\n\t\t{% for source in sources %}\n\t\tSELECT\n\t\t{% for col in source.columns %}\n            {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\n\t\t{{ source.join }}\n\n\t\t{% if not loop.last %}\n\t\t\t{{ config.insertStrategy }}\n\t\t{% endif %}\n\t{% endfor %}\n\t)\n\tAS \"SRC\"\n\tON\n\t{% for col in sources[0].columns if (col.sourceColumns[0] \n                                        and col.sourceColumns[0].column \n                                        and col.sourceColumns[0].column.isHubHash\n                                        ) -%}\n\t\t{% if not loop.first %}\n\t\t\tAND\n\t\t{% endif %}\n\t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n\t{% endfor %}\n\tWHEN NOT MATCHED THEN\n\tINSERT\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t) VALUES\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"SRC\".\"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\n\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n\t\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n\t\t\t"
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: "{% if node.materializationType == 'table' %}\n\t\t\t\t{{ stage('Create Link Table') }}\n\t\t\t\n\t\t\t\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in columns %}\n\t\t\t\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t\t\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\t\t\t\n\t\t\t{% endif %}"
        run:
          templateString: "\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t{% if config.preSQL %}\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t\n\t{% endif %}\n\n\t\t\t\n\t{{ stage('Merge Link') }}\n\tMERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\" USING\n\t(\n\t\t{% for source in sources %}\n\t\tSELECT\n\t\t{% for col in source.columns %}\n            {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\n\t\t{{ source.join }}\n\n\t\t{% if not loop.last %}\n\t\t\t{{ config.insertStrategy }}\n\t\t{% endif %}\n\t{% endfor %}\n\t)\n\tAS \"SRC\"\n\tON\n\t{% for col in sources[0].columns if (col.sourceColumns[0] \n                                        and col.sourceColumns[0].column \n                                        and col.sourceColumns[0].column.isLinkHash\n                                        ) -%}\n\t\t{% if not loop.first %}\n\t\t\tAND\n\t\t{% endif %}\n\t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n\t{% endfor %}\n\tWHEN NOT MATCHED THEN\n\tINSERT\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t) VALUES\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"SRC\".\"{{ col.name }}\"\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\t\n\t{% endif %}\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n\t\t\t"
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: "{% if node.materializationType == 'table' %}\n\t\t\t\t{{ stage('Create Satellite Table') }}\n\t\t\t\n\t\t\t\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in columns %}\n\t\t\t\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t\t\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\t\t\t\n\t\t\t{% endif %}"
        run:
          templateString: "\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t\t{% if config.preSQL %}\n\t\t\t{{ stage('Pre-SQL') }}\n\t\t\t{{ config.preSQL }}\n\t\t{% endif %}\n\t\n\t\t{{ stage('Merge Satellite') }}\n\t\tMERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\" USING\n\t\t(\n\t\t\t{% for source in sources %}\n\t\t\tSELECT\n\t\t\t{% for col in source.columns %}\n                {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t{% endfor %}\n\t\n\t\t\t{{ source.join }}\n\t\n\t\t\t{% if not loop.last %}\n\t\t\t\t{{ config.insertStrategy }}\n\t\t\t{% endif %}\n\t\t{% endfor %}\n\t\t)\n\t\tAS \"SRC\"\n\t\tON\n\t\t{% for col in sources[0].columns if (col.sourceColumns[0] \n                                            and col.sourceColumns[0].column \n                                            and col.sourceColumns[0].column.isChangeHash\n                                            ) -%}\n\t\t\t{% if not loop.first %}\n\t\t\t\tAND\n\t\t\t{% endif %}\n\t\t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n\t\t{% endfor %}\n\t\tWHEN NOT MATCHED THEN\n\t\tINSERT\n\t\t(\n\t\t\t{% for col in columns %}\n\t\t\t\t\"{{ col.name }}\"\n\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t{% endfor %}\n\t\t) VALUES\n\t\t(\n\t\t\t{% for col in columns %}\n\t\t\t\t\"SRC\".\"{{ col.name }}\"\n\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t{% endfor %}\n\t\t)\n\t\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\t\n\t{% endif %}\n\t\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n\t\t\t"
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: "{% if node.override.create.enabled %}\n\t\n\t{{ node.override.create.script }}\n\n{% elif node.materializationType == 'table' %}\n\t{{ stage('Create Stage Table') }}\n\n\tCREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n\t(\n\t\t{% for col in columns %}\n\t\t\t\"{{ col.name }}\" {{ col.dataType }}\n\t\t\t{%- if not col.nullable %} NOT NULL\n\t\t\t\t{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n\t\t\t{% endif %}\n\t\t\t{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t{% endfor %}\n\t)\n\t{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\n\n{% elif node.materializationType == 'view' %}\n    {{ stage('Create Stage View') }}\n\n    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n    (\n        {% for col in columns %}\n            \"{{ col.name }}\"\n            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n    )\n    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n    AS\n    {% for source in sources %}\n        SELECT\n        {% for col in source.columns %}\n            {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n\n        {{ source.join }}\n\n        {% if not loop.last %}\n            {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}\n                {{ config.insertStrategy }}\n            {% else %}\n                UNION\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n\n{% endif %}\n"
        run:
          templateString: "\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t{% if config.preSQL %}\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\t\n\t\n\t\n\t\t{% if config.truncateBefore %}\n\t\n\t\t\t{{ stage('Truncate Stage Table') }}\n\t\t\tTRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}\n\t\n\t\t{% endif %}\n\t\n\t\n\t\t{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}\n\t\t\t{{ stage( config.insertStrategy + ' Sources' | string ) }}\n\t\t\tINSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in columns %}\n\t\t\t\t\t\t\"{{ col.name }}\"\n\t\t\t\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t{% endif %}\n\t\n\t\n\t\t{% for source in sources %}\n\t\n\t\t\t{% if config.insertStrategy == 'INSERT' %}\n\t\t\t\t{{ stage('Insert ' + source.name | string ) }}\n\t\n\t\t\t\tINSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n\t\t\t\t(\n\t\t\t\t\t{% for col in source.columns %}\n\t\t\t\t\t\t\"{{ col.name }}\"\n\t\t\t\t\t\t{%- if not loop.last -%},{% endif %}\n\t\t\t\t\t{% endfor %}\n\t\t\t\t)\n\t\t\t{% endif %}\n\t\n\t\t\tSELECT\n\t\t\t{% for col in source.columns %}\n                {{ get_source_transform(col) }} AS \"{{ col.name }}\"\n\t\t\t\t{%- if not loop.last -%}, {% endif %}\n\t\t\t{% endfor %}\n\t\n\t\t\t{{ source.join }}\n\t\n\t\t\t{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}\n\t\t\t\t{{config.insertStrategy}}\n\t\t\t{% endif %}\n\t\n\t\t{% endfor %}\n\t\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}\n"
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: "{% if node.materializationType == 'table' %}\n    {{ stage('Create Persistent Stage Table') }}\n\n    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}\n    (\n        {% for col in columns %}\n            \"{{ col.name }}\" {{ col.dataType }}\n            {% if col.isSurrogateKey %}\n\t\t        identity\n            {% endif %}\n            {%- if not col.nullable %} NOT NULL\n                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}\n            {% endif %}\n            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n    )\n    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n\n\n{% elif node.materializationType == 'view' %}\n    {{ stage('Create Persistent Stage View') }}\n\n    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}\n    (\n        {% for col in columns %}\n            \"{{ col.name }}\"\n            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}\n            {%- if not loop.last -%},{% endif %}\n        {% endfor %}\n    )\n    {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}\n    AS\n    {% for source in sources %}\n\n\t\t{% if not loop.last %} UNION ALL {% endif %}\n\t{% endfor %}\n\n        {% for col in source.columns %}\n            {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}\n                NULL\n            {% else %}\n                {{ get_source_transform(col) }}\n            {% endif %}\n            AS \"{{ col.name }}\"\n            {%- if not loop.last -%}, {% endif %}\n        {% endfor %}\n        {{ source.join }}\n\n{% endif %}\n"
        run:
          templateString: "\n{% set has_business_key = columns | selectattr(\"isBusinessKey\") | list | length > 0 %}\n{% set is_type_2 = columns | selectattr(\"isChangeTracking\") | list | length > 0 %}\n\n    {% for test in node.tests if config.testsEnabled %}\n        {% if test.runOrder == 'Before' %}\n            {{ test_stage(test.name, test.continueOnFailure) }}\n            {{ test.templateString }}\n        {% endif %}\n    {% endfor %}\n\n{% if node.materializationType == 'table' %}\n\t{% if config.preSQL %}\n\t\t{{ stage('Pre-SQL') }}\n\t\t{{ config.preSQL }}\n\t{% endif %}\n\t\n    {% if has_business_key and is_type_2 %}\n\n        {% for source in sources %}\n            {{ stage('MERGE ' + source.name | string) }}\n            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n            USING (\n            /* New Rows That Don't Exist */\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion %}\n                    1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                   {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor %}\n                'INSERT_INITAL_VERSION_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                    {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                \"DIM\".\"{{ col.name }}\" IS NULL\n            {% endfor %}\n            UNION ALL\n            /* New Row Needing To Be Inserted Due To Type-2 Column Changes */\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion %}\n                    \"DIM\".\"{{ col.name }}\" + 1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                   {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor %}\n                'INSERT_NEW_VERSION_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            {% for col in source.columns if (col.isChangeTracking == true) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**') )\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            UNION ALL\n            /* Rows Needing To Be Expired Due To Type-2 Column Changes\n            In this case, only two columns are merged (version and end date) */\n            SELECT\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemEndDate %}\n                    DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))\n                {% elif col.isSystemCurrentFlag %}\n                    'N'\n                {% else %}\n                    \"DIM\".\"{{ col.name }}\"\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor -%}\n                'update_expired_version_rows' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            {% for col in source.columns if (col.isChangeTracking == true) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**') )\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            UNION ALL\n            /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns\n            This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/\n            SELECT\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}\n                    \"DIM\".\"{{ col.name }}\"\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                    {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\",\n            {% endfor -%}\n                'UPDATE_NON_TYPE2_ROWS' AS \"DML_OPERATION\"\n            {{ source.join }}\n            INNER JOIN {{ ref_no_link(node.location.name, node.name) }} \"DIM\" ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %}\n            WHERE \"DIM\".\"{{ get_value_by_column_attribute(\"isSystemCurrentFlag\") }}\" = 'Y'\n            AND (\n            {% for col in source.columns if (col.isChangeTracking) -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                {{ get_source_transform(col) }} = \"DIM\".\"{{ col.name }}\"\n            {% endfor %} )\n            {% for col in source.columns if not (   col.isBusinessKey or\n                                                    col.isChangeTracking or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemUpdateDate or\n                                                    col.isSystemCreateDate) -%}\n                {% if loop.first %}\n                    AND (\n                {% endif %}\n                {% if not loop.first %}\n                    OR\n                {% endif %}\n                NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(\"DIM\".\"{{ col.name }}\" as STRING), '**NULL**')\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n        ) AS \"SRC\"\n        ON\n        {% for col in source.columns if col.isBusinessKey -%}\n            {% if not loop.first %}\n                AND\n            {% endif %}\n            \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n        {% endfor %}\n        AND \"TGT\".\"{{ get_value_by_column_attribute(\"isSystemVersion\") }}\" = \"SRC\".\"{{ get_value_by_column_attribute(\"isSystemVersion\") }}\"\n        WHEN MATCHED THEN UPDATE SET\n        {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}\n            \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        WHEN NOT MATCHED THEN INSERT (\n        {%- for col in source.columns if not col.isSurrogateKey %}\n            \"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        )\n        VALUES (\n        {%- for col in source.columns if not col.isSurrogateKey %}\n            \"SRC\".\"{{ col.name }}\"\n            {% if not loop.last %}, {% endif %}\n        {% endfor -%}\n        )\n\n    {% endfor %}\n\n    {% elif has_business_key and not is_type_2 %}\n        {% for source in sources %}\n            {{ stage('MERGE ' + source.name | string ) }}\n            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} \"TGT\"\n            USING (\n                SELECT\n                {% for col in source.columns if not col.isSurrogateKey %}\n                    {% if col.isSystemVersion %}\n                    \t1\n                    {% elif col.isSystemCurrentFlag %}\n                    \t'Y'\n                    {% else %}\n                        {{ get_source_transform(col) }}\n                    {% endif %}\n                    AS \"{{ col.name }}\"\n                    {%- if not loop.last %}, {% endif %}\n                {% endfor %}\n                {{ source.join }})\n                AS \"SRC\"\n            ON\n            {% for col in source.columns if col.isBusinessKey -%}\n                {% if not loop.first %}\n                    AND\n                {% endif %}\n                \"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name }}\"\n            {% endfor %}\n            WHEN MATCHED\n            {% for col in source.columns if not (   col.isBusinessKey or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemUpdateDate or\n                                                    col.isSystemCreateDate) %}\n                {% if loop.first %}\n                    AND (\n                {% else %}\n                    OR\n                {% endif %}\n                NVL( CAST(\"SRC\".\"{{ col.name }}\" as STRING), '**NULL**') <> NVL( CAST(\"TGT\".\"{{ col.name }}\" as STRING), '**NULL**')\n                {% if loop.last %}\n                    )\n                {% endif %}\n            {% endfor %}\n            THEN UPDATE SET\n            {%- for col in source.columns if not (  col.isBusinessKey or\n                                                    col.isSurrogateKey or\n                                                    col.isSystemVersion or\n                                                    col.isSystemCurrentFlag or\n                                                    col.isSystemStartDate or\n                                                    col.isSystemEndDate or\n                                                    col.isSystemCreateDate) %}\n                    \"TGT\".\"{{ col.name }}\" = \"SRC\".\"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor %}\n            WHEN NOT MATCHED THEN\n            INSERT (\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                \"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor -%}\n            )\n            VALUES (\n            {%- for col in source.columns if not col.isSurrogateKey %}\n                \"SRC\".\"{{ col.name }}\"\n                {% if not loop.last %}, {% endif %}\n            {% endfor -%}\n            )\n        {% endfor %}\n    {% else %}\n        {% for source in sources %}\n            {{ stage('Insert ' + source.name | string ) }}\n            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}\n            (\n                {% for col in source.columns if not col.isSurrogateKey %}\n                    \"{{ col.name }}\"\n                    {%- if not loop.last -%},{% endif %}\n                {% endfor %}\n            )\n\n            SELECT\n            {% for col in source.columns if not col.isSurrogateKey %}\n\n                {% if col.isSystemVersion %}\n                    1\n                {% elif col.isSystemCurrentFlag %}\n                    'Y'\n                {% else %}\n                    {{ get_source_transform(col) }}\n                {% endif %}\n                AS \"{{ col.name }}\"\n                {%- if not loop.last -%}, {% endif %}\n                \n            {% endfor %}\n            {{ source.join }}\n        {% endfor %}            \n    {% endif %}\n\t\n\t{% if config.postSQL %}\n\t\t{{ stage('Post-SQL') }}\n\t\t{{ config.postSQL }}\n\t{% endif %}\n\t\n{% endif %}\n\n{% if config.testsEnabled %}\n\t{% for test in node.tests %}\n\t\t{% if test.runOrder == 'After' %}\n\t\t\t{{ test_stage(test.name, test.continueOnFailure) }}\n\t\t\t{{ test.templateString }}\n        {% endif %}\n\t{% endfor %}\n\n\t{% for column in columns %}\n\t\t{% for test in column.tests %}\n\t\t\t{{ test_stage(column.name + \": \" + test.name) }}\n\t\t\t{{ test.templateString }}\n\t\t{% endfor %}\n\t{% endfor %}\n{% endif %}"
    name: Persistent Stage
    version: 1
subgraphs: {}
version: 1
